{"version":3,"sources":["dataCommon.es6"],"names":[],"mappings":";;;;;;AAIA;;;;AACA;;;;;;AALA;;;;kBAQe;AACX,aAAS,eAAK,IAAL,CAAW,SAAX,EAAsB,UAAtB,CADE;AAEX,aAAS,eAAK,IAAL,CAAW,SAAX,EAAsB,MAAtB,CAFE;AAGX,0BAHW,kCAGY,IAHZ,EAGkB;AAAA;;AACzB,YAAI,aAAG,UAAH,CAAc,IAAd,CAAJ,EAA0B;AACtB,yBAAG,WAAH,CAAe,IAAf,EAAqB,OAArB,CAA6B,UAAC,IAAD,EAAM,KAAN,EAAgB;AACzC,oBAAI,UAAU,OAAO,GAAP,GAAa,IAA3B;AACA,oBAAG,aAAG,SAAH,CAAa,OAAb,EAAsB,WAAtB,EAAH,EAAwC;AAAE;AACtC,0BAAK,sBAAL,CAA4B,OAA5B;AACH,iBAFD,MAEO;AAAE;AACL,iCAAG,UAAH,CAAc,OAAd;AACH;AACJ,aAPD;AAQA,yBAAG,SAAH,CAAa,IAAb;AACH;AACJ,KAfU;AAgBX,sBAhBW,8BAgBQ,GAhBR,EAgBa,IAhBb,EAgBmB;AAAA;;AAC1B,YAAI,SAAS,aAAG,UAAH,CAAc,GAAd,CAAb;AACA,YAAI,QAAQ,UAAU,aAAG,QAAH,CAAY,GAAZ,CAAtB;AACA,YAAI,cAAc,UAAU,MAAM,WAAN,EAA5B;AACA,YAAI,UAAU,WAAd,EAA2B;AACvB,yBAAG,SAAH,CAAa,IAAb;AACA,yBAAG,WAAH,CAAe,GAAf,EAAoB,OAApB,CAA4B,yBAAiB;AACzC,uBAAK,kBAAL,CAAwB,eAAK,IAAL,CAAU,GAAV,EAAe,aAAf,CAAxB,EACI,eAAK,IAAL,CAAU,IAAV,EAAgB,aAAhB,CADJ;AAEH,aAHD;AAIH,SAND,MAMO;AACH,gBAAI,iBAAJ;AACA,uBAAW,aAAG,YAAH,CAAgB,GAAhB,EAAqB,OAArB,CAAX;AACA,yBAAG,aAAH,CAAiB,IAAjB,EAAuB,QAAvB,EAAiC,OAAjC;AACA;AACH;AACJ,KAhCU;AAiCX,SAjCW,mBAiCH;AACJ,aAAK,sBAAL,CAA4B,KAAK,OAAjC;AACH,KAnCU;AAoCX,SApCW,mBAoCH;AACJ,aAAK,KAAL;AACA,aAAK,kBAAL,CAAwB,KAAK,OAA7B,EAAsC,KAAK,OAA3C;AACH;AAvCU,C","file":"dataCommon.js","sourcesContent":["/**\n * Created by Jamey McElveen on 12/1/16.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\n\nexport default {\n    srcPath: path.join( __dirname, 'moc-data'),\n    dstPath: path.join( __dirname, 'data'),\n    _deleteFolderRecursive(path) {\n        if( fs.existsSync(path) ) {\n            fs.readdirSync(path).forEach((file,index) => {\n                let curPath = path + \"/\" + file;\n                if(fs.lstatSync(curPath).isDirectory()) { // recurse\n                    this._deleteFolderRecursive(curPath);\n                } else { // delete file\n                    fs.unlinkSync(curPath);\n                }\n            });\n            fs.rmdirSync(path);\n        }\n    },\n    _copyRecursiveSync(src, dest) {\n        let exists = fs.existsSync(src);\n        let stats = exists && fs.statSync(src);\n        let isDirectory = exists && stats.isDirectory();\n        if (exists && isDirectory) {\n            fs.mkdirSync(dest);\n            fs.readdirSync(src).forEach(childItemName => {\n                this._copyRecursiveSync(path.join(src, childItemName),\n                    path.join(dest, childItemName));\n            });\n        } else {\n            let contents;\n            contents = fs.readFileSync(src, 'utf-8');\n            fs.writeFileSync(dest, contents, 'utf-8');\n            //fs.linkSync(src, dest);\n        }\n    },\n    empty() {\n        this._deleteFolderRecursive(this.dstPath);\n    },\n    reset() {\n        this.empty();\n        this._copyRecursiveSync(this.srcPath, this.dstPath);\n    }\n};\n"]}