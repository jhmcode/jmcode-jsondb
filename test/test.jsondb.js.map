{"version":3,"sources":["test.jsondb.es6"],"names":[],"mappings":";;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAPA;;;;AASA,IAAI,iBAAJ;AAAA,IAAc,aAAd;AAAA,IACI,YAAY,eAAK,IAAL,CAAW,SAAX,EAAsB,MAAtB,CADhB;AAAA,IAEI,eAAe;AACX,UAAM,sCADK;AAEX,iBAAa,WAFF;AAGX,iBAAa,MAHF;AAIX,gBAAY;AAJD,CAFnB;;AASA,OAAO,YAAM;AACT,yBAAW,KAAX;AACA,WAAO,IAAI,eAAO,UAAX,CAAsB,SAAtB,CAAP;AACA,eAAW,IAAI,eAAO,IAAX,CAAgB,IAAhB,EAAsB,UAAtB,CAAX;AACA,WAAO,IAAP;AACH,CALD;;AAOA,MAAM,YAAM;AACR,yBAAW,KAAX;AACA,WAAO,IAAP;AACH,CAHD;;AAKA,SAAS,QAAT,EAAmB,YAAM;;AAErB,aAAS,eAAT,EAA0B,YAAM;AAC5B,WAAG,oCAAH,EAAyC,YAAM;AAC3C,gBAAI,WAAW,OAAf;AACA,6BAAO,KAAP,CAAa,QAAb,EAAuB,KAAK,IAAL,CAAU,OAAjC;AACH,SAHD;AAIH,KALD;;AAOA,aAAS,WAAT,EAAsB,YAAM;AACxB,WAAG,wBAAH,EAA6B,YAAM;AAC/B,gBAAI,YAAJ;AAAA,gBACI,MAAM;AACF,sBAAM,sCADJ;AAEF,6BAAa,WAFX;AAGF,6BAAa,MAHX;AAIF,4BAAY;AAJV,aADV;;AAQA,kBAAM,SAAS,MAAT,CAAgB,IAAI,EAApB,CAAN;AACA,6BAAO,KAAP,CAAa,IAAI,SAAjB,EAA4B,IAAI,SAAhC;AACH,SAXD;AAYH,KAbD;;AAeA,aAAS,WAAT,EAAsB,YAAM;AACxB,WAAG,wBAAH,EAA6B,YAAM;AAC/B,gBAAI,YAAJ;AAAA,gBAAS,YAAT;AAAA,gBACI,UAAU;AACN,sBAAM,sCADA;AAEN,6BAAa,WAFP;AAGN,6BAAa,MAHP;AAIN,4BAAY;AAJN,aADd;;AAQA,kBAAM,SAAS,MAAT,CAAgB,OAAhB,CAAN;AACA,kBAAM,SAAS,MAAT,CAAgB,IAAI,EAApB,CAAN;;AAEA,6BAAO,KAAP,CAAa,IAAI,SAAjB,EAA4B,IAAI,SAAhC;AACH,SAbD;AAcH,KAfD;;AAiBA,aAAS,WAAT,EAAsB,YAAM;AACxB,WAAG,wBAAH,EAA6B,YAAM;AAC/B,gBAAI,eAAJ;AAAA,gBAAY,eAAZ;;AAEA,qBAAS,SAAS,MAAT,CAAgB,aAAa,EAA7B,CAAT;AACA,mBAAO,SAAP,GAAmB,MAAnB;AACA,qBAAS,MAAT,CAAgB,MAAhB;AACA,qBAAS,SAAS,MAAT,CAAgB,aAAa,EAA7B,CAAT;;AAEA,6BAAO,KAAP,CAAa,OAAO,SAApB,EAA+B,MAA/B;AACH,SATD;AAUH,KAXD;;AAaA,aAAS,WAAT,EAAsB,YAAM;AACxB,WAAG,wBAAH,EAA6B,YAAM;AAC/B,gBAAI,MAAM,SAAS,MAAT,CAAgB,aAAa,EAA7B,CAAV;AACA,6BAAO,KAAP,CAAa,IAAb,EAAmB,OAAO,IAA1B;AACA,qBAAS,MAAT,CAAgB,aAAa,EAA7B;AACA,kBAAM,SAAS,MAAT,CAAgB,aAAa,EAA7B,CAAN;AACA,6BAAO,KAAP,CAAa,IAAb,EAAmB,GAAnB;AACH,SAND;AAOH,KARD;AAUH,CAhED","file":"test.jsondb.js","sourcesContent":["/**\n * Created by Jamey McElveen on 12/1/16.\n */\n\nimport path from 'path';\nimport assert from 'assert';\nimport dataCommon from './dataCommon.js';\nimport JsonDB from '../src/main.js';\n\nlet patients, conn,\n    DATA_PATH = path.join( __dirname, 'data'),\n    TEST_PATIENT = {\n        \"id\": \"00744d41-fdb0-4071-bddb-f38c75916bb2\",\n        \"patientNo\": \"1234-5678\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\"\n    };\n\nbefore(() => {\n    dataCommon.reset();\n    conn = new JsonDB.Connection(DATA_PATH);\n    patients = new JsonDB.List(conn, 'patients');\n    return true;\n});\n\nafter(() => {\n    dataCommon.empty();\n    return true;\n});\n\ndescribe('JsonDb', () => {\n\n    describe('#new JsonDb()', () => {\n        it('should return version if connected', () => {\n            let expected = \"1.0.0\";\n            assert.equal(expected, conn.info.version);\n        });\n    });\n\n    describe('#select()', () => {\n        it('should select a record', () => {\n            let act,\n                exp = {\n                    \"id\": \"00744d41-fdb0-4071-bddb-f38c75916bb2\",\n                    \"patientNo\": \"1234-5678\",\n                    \"firstName\": \"John\",\n                    \"lastName\": \"Doe\"\n                };\n\n            act = patients.select(exp.id);\n            assert.equal(exp.firstName, act.firstName);\n        });\n    });\n\n    describe('#insert()', () => {\n        it('should insert a record', () => {\n            let act, exp,\n                patient = {\n                    \"id\": \"00000000-fdb0-4071-bddb-f38c75916bb2\",\n                    \"patientNo\": \"1234-4321\",\n                    \"firstName\": \"Jane\",\n                    \"lastName\": \"Doe\"\n                };\n\n            exp = patients.insert(patient);\n            act = patients.select(exp.id);\n\n            assert.equal(exp.firstName, act.firstName);\n        });\n    });\n\n    describe('#update()', () => {\n        it('should update a record', () => {\n            let oldObj, newObj;\n\n            oldObj = patients.select(TEST_PATIENT.id);\n            oldObj.firstName = 'Jake';\n            patients.update(oldObj);\n            newObj = patients.select(TEST_PATIENT.id);\n\n            assert.equal(newObj.firstName, \"Jake\");\n        });\n    });\n\n    describe('#delete()', () => {\n        it('should delete a record', () => {\n            let obj = patients.select(TEST_PATIENT.id);\n            assert.equal(true, obj != null);\n            patients.delete(TEST_PATIENT.id);\n            obj = patients.select(TEST_PATIENT.id);\n            assert.equal(null, obj);\n        });\n    });\n\n});\n"]}