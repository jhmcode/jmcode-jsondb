{"version":3,"sources":["db-obj.es6"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEqB,K;AACjB,mBAAY,MAAZ,EAAoB;AAAA;;AAChB,aAAK,MAAL,GAAc,MAAd;AACH;;;;6BAEI,O,EAAS,S,EAAW;AACrB,gBAAI,aAAJ;AAAA,gBACI,cAAc,YAAY,eAAK,IAAL,CAAU,SAAV,EAAqB,MAArB,EAA6B,OAA7B,CAAZ,GAAoD,OADtE;AAAA,gBAEI,WAAW,cAAc,OAF7B;AAAA,gBAGI,WAAW,eAAK,IAAL,CAAU,KAAK,MAAf,EAAuB,QAAvB,CAHf;AAIA,gBAAG,CAAC,aAAG,UAAH,CAAc,QAAd,CAAJ,EAA6B;AACzB,uBAAO,IAAP;AACA;AACA;AACA;AACH;AACD,mBAAO,aAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAAP;AACA,mBAAO,KAAK,KAAL,CAAW,IAAX,CAAP;AACH;;;8BAEK,O,EAAS,S,EAAW,G,EAAK;AAC3B,gBAAI,aAAJ;AAAA,gBACI,cAAc,YAAY,eAAK,IAAL,CAAU,SAAV,EAAqB,MAArB,EAA6B,OAA7B,CAAZ,GAAoD,OADtE;AAAA,gBAEI,WAAW,cAAc,OAF7B;AAAA,gBAGI,WAAW,eAAK,IAAL,CAAU,KAAK,MAAf,EAAuB,QAAvB,CAHf;;AAKA,mBAAO,KAAK,SAAL,CAAe,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAP;AACA,yBAAG,aAAH,CAAiB,QAAjB,EAA2B,IAA3B,EAAiC,MAAjC;AACH;;;gCAEM,O,EAAS,S,EAAW;AACvB,gBAAI,aAAJ;AAAA,gBACI,cAAc,YAAY,eAAK,IAAL,CAAU,SAAV,EAAqB,MAArB,EAA6B,OAA7B,CAAZ,GAAoD,OADtE;AAAA,gBAEI,WAAW,cAAc,OAF7B;AAAA,gBAGI,WAAW,eAAK,IAAL,CAAU,KAAK,MAAf,EAAuB,QAAvB,CAHf;AAIA,yBAAG,UAAH,CAAc,QAAd;AACH;;;;;;kBApCgB,K","file":"db-obj.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport './extensions.js';\n\nexport default class DBObj {\n    constructor(dbPath) {\n        this.dbPath = dbPath;\n    }\n\n    read(objName, tableName) {\n        let json,\n            fullObjName = tableName ? path.join(tableName, 'data', objName) : objName,\n            fileName = fullObjName + '.json',\n            filePath = path.join(this.dbPath, fileName);\n        if(!fs.existsSync(filePath)) {\n            return null;\n            // let err = tableName ? `Database object does not exist \"${tableName}:${objName}\"`\n            //     : `Database object does not exist \"${objName}\"`;\n            // throw new Error(err);\n        }\n        json = fs.readFileSync(filePath, \"utf8\");\n        return JSON.parse(json);\n    }\n\n    write(objName, tableName, obj) {\n        let json,\n            fullObjName = tableName ? path.join(tableName, 'data', objName) : objName,\n            fileName = fullObjName + '.json',\n            filePath = path.join(this.dbPath, fileName);\n\n        json = JSON.stringify(obj, null, 2);\n        fs.writeFileSync(filePath, json, \"utf8\");\n    }\n\n    delete(objName, tableName) {\n        let json,\n            fullObjName = tableName ? path.join(tableName, 'data', objName) : objName,\n            fileName = fullObjName + '.json',\n            filePath = path.join(this.dbPath, fileName);\n        fs.unlinkSync(filePath);\n    }\n}"]}